#version 330 core
out vec4 FragColor;

in vec3 worldSpacePos;
in vec2 TexCoords;
in vec4 lightSpacePos;

uniform vec3 cameraWorldSpacePos;
uniform mat4 lightSpaceMatrix;

// Material Properties
uniform float ambientStr;
uniform float diffuseStr;
uniform float specularStr;
uniform float materialShininess;
uniform vec3 materialColor;

// Light properties
uniform vec3 lightColor;
uniform vec3 lightPos;

uniform sampler2D normalMapTexture;
uniform sampler2D shadowMap;

float calculateShadow(vec4 fragPosLightSpace, float bias)
{
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;


    float shadow = 0.0;
    if(projCoords.z <= 1.0) {
        vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
        for(int x = -1; x <= 1; ++x)
        {
            for(int y = -1; y <= 1; ++y)
            {
                float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
                shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        
            }    
        }
        shadow /= 9.0;
    }

    return shadow;
}


// all of this is done in world space 

void main()
{    
    vec3 normalPos = texture(normalMapTexture, TexCoords).rgb;
    // blinn phong shading

    // Ambient
    vec3 ambient = materialColor * ambientStr;

    // diffuse light 
    vec3 normalizedNormal = normalize(normalPos);
    vec3 lightDir = normalize(lightPos - worldSpacePos);
    float diff = max(dot(normalizedNormal, lightDir), 0.0);
    vec3 diffuse = materialColor * diff * diffuseStr;

    // specular light (blinn-phong)
    vec3 viewDir = normalize(cameraWorldSpacePos-worldSpacePos);
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normalizedNormal, halfwayDir), 0.0), materialShininess);
    vec3 specular = materialColor * (spec * specularStr);


     // calculate shadows 

    vec4 lightSpacePos = lightSpaceMatrix * vec4(worldSpacePos,1.0);
    float bias = 0.005;
    float shadow = calculateShadow(lightSpacePos, bias);


     vec3 finalColor = (ambient + (1.0 - shadow) * (diffuse + specular)) * lightColor; 
    FragColor = vec4(finalColor,1);
}