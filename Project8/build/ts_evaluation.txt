#version 410 core

layout(quads, equal_spacing, ccw) in;

in vec3 worldSpacePosFromVS[];
in vec2 TexCoordsFromVS[];

out vec3 worldSpacePos;
out vec2 TexCoords;

uniform sampler2D dispMap;
uniform mat4 view;
uniform mat4 projection;
uniform float dispFactor;

vec4 interpolate(vec4 v0, vec4 v1, vec4 v2, vec4 v3) {
    vec4 a = mix(v0, v1, gl_TessCoord.x);
    vec4 b = mix( v3, v2, gl_TessCoord.x);
    return mix (a,b,gl_TessCoord.y);
}

vec2 interpolate(vec2 v0, vec2 v1, vec2 v2, vec2 v3) {
    vec2 a = mix(v0, v1, gl_TessCoord.x);
    vec2 b = mix( v3, v2, gl_TessCoord.x);
    return mix (a,b,gl_TessCoord.y);
}

void main() {
    gl_Position = interpolate(gl_in[0].gl_Position, gl_in[1].gl_Position, gl_in[2].gl_Position, gl_in[3].gl_Position);
    TexCoords = interpolate(TexCoordsFromVS[0],TexCoordsFromVS[1],TexCoordsFromVS[2],TexCoordsFromVS[3]);
    //TexCoords = TexCoordsFromVS[0] * (1.0 - u - v) + TexCoordsFromVS[1] * u + TexCoordsFromVS[2] * v;

    vec3 dispAmt = texture(dispMap, TexCoords).rgb * dispFactor;
    gl_Position = gl_Position + vec4(0,dispAmt.y,0,0);
    worldSpacePos = vec3(inverse(view) * inverse(projection) * gl_Position);
}