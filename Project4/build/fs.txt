#version 330 core

in vec3 fragNormal;
in vec3 fragPos;
in vec3 lightViewPos;
layout(location=0) out vec4 color;

void main() {
    vec3 lightColor = vec3(1,1,1);
    vec3 objectColor = vec3(1,0,0);
    float ambientStrength = 0.1;
    vec3 cameraViewPos = vec3(0,0,0);

    // ambient light
    vec3 ambient = ambientStrength * lightColor;

    // diffuse light 
    vec3 normalizedNormal = normalize(fragNormal);
    vec3 lightDir = normalize(lightViewPos - fragPos);
    float diff = max(dot(normalizedNormal, lightDir), 0.0);
    vec3 diffuse = diff * objectColor;

    // specular light (blinn-phong)
    float specularStrength = 0.8;
    vec3 viewDir = normalize(cameraViewPos - fragPos);
    vec3 halfwayDir = normalize(lightDir + viewDir);
    vec3 reflectDir = reflect(-lightDir, normalizedNormal);  
    float spec = pow(max(dot(normalizedNormal, halfwayDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;  

    vec3 finalColor = ((diffuse+specular) * lightColor) + (ambient*objectColor);
    color = vec4(finalColor,1);
    // debug
    //color = vec4(lightViewPos/255.0,1);
    //color = vec4((normalizedNormal * 0.5) + 0.5, 1);
}