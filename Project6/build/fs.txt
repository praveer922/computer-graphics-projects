#version 330 core

// Inputs from vertex shader
in vec3 normalViewPos;
in vec3 fragPos;
in vec3 lightViewPos;
in vec2 TexCoords;

// Material Properties
uniform vec3 materialAmbient;
uniform vec3 materialDiffuse;
uniform vec3 materialSpecular;
uniform float materialShininess;

// Texture maps 
uniform sampler2D ambientMap;
uniform sampler2D diffuseMap;
uniform sampler2D specularMap;

// Light properties
uniform vec3 lightColor;

layout(location=0) out vec4 color;

void main() {
    // Ambient
    vec3 ambient = texture(ambientMap, TexCoords).rgb * materialAmbient;

    // diffuse light 
    vec3 normalizedNormal = normalize(normalViewPos);
    vec3 lightDir = normalize(lightViewPos - fragPos);
    float diff = max(dot(normalizedNormal, lightDir), 0.0);
    vec3 diffuse = texture(diffuseMap, TexCoords).rgb * (diff * materialDiffuse);

    // specular light (blinn-phong)
    vec3 viewDir = normalize(-fragPos);
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normalizedNormal, halfwayDir), 0.0), materialShininess);
    vec3 specular = texture(specularMap, TexCoords).rgb * (spec * materialSpecular);

    vec3 finalColor = (ambient + diffuse + specular) * lightColor;
    color = vec4(finalColor,1);
    // debug
    //color = texture(diffuseMap, TexCoord);
    //color = vec4(lightViewPos/255.0,1);
    //color = vec4((normalizedNormal * 0.5) + 0.5, 1);
}